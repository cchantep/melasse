package melasse;

import java.io.Serializable;
import java.io.PrintWriter;
import java.io.PrintStream;

import java.util.EventListener;
import java.util.Locale;
import java.util.Set;

import java.beans.PropertyChangeListener;

import java.awt.GraphicsConfiguration;
import java.awt.ComponentOrientation;
import java.awt.BufferCapabilities;
import java.awt.HeadlessException;
import java.awt.ImageCapabilities;
import java.awt.MenuComponent;
import java.awt.MenuContainer;
import java.awt.AWTException;
import java.awt.FontMetrics;
import java.awt.PointerInfo;
import java.awt.Rectangle;
import java.awt.PopupMenu;
import java.awt.Container;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.AWTEvent;
import java.awt.Toolkit;
import java.awt.Cursor;
import java.awt.Window;
import java.awt.Image;
import java.awt.Color;
import java.awt.Point;
import java.awt.Event;
import java.awt.Font;

import java.awt.image.BufferStrategy;
import java.awt.image.ImageProducer;
import java.awt.image.ImageObserver;
import java.awt.image.VolatileImage;
import java.awt.image.ColorModel;

import java.awt.peer.ComponentPeer;

import java.awt.dnd.DropTarget;

import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputMethodListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelListener;
import java.awt.event.ComponentListener;
import java.awt.event.HierarchyListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.HierarchyEvent;
import java.awt.event.MouseListener;
import java.awt.event.FocusListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;

import java.awt.im.InputMethodRequests;
import java.awt.im.InputContext;

import javax.accessibility.AccessibleStateSet;
import javax.accessibility.AccessibleContext;

/**
 * Interface to be able to proxify components.
 *
 * @author Cedric Chantepie 
 */
public interface IComponent 
    extends ImageObserver, MenuContainer, Serializable {

    int getBoundsOp();
    void setBoundsOp(int p1);
    void initializeFocusTraversalKeys();
    String constructComponentName();
    public String getName();
    public void setName(String p1);
    public Container getParent();
    Container getParent_NoClientCode();
    public ComponentPeer getPeer();
    public void setDropTarget(DropTarget p1);
    public DropTarget getDropTarget();
    public GraphicsConfiguration getGraphicsConfiguration();
    void resetGC();
    void setGCFromPeer();
    void checkGD(String p1);
    public Object getTreeLock();
    public Toolkit getToolkit();
    Toolkit getToolkitImpl();
    public boolean isValid();
    public boolean isDisplayable();
    public boolean isVisible();
    boolean isRecursivelyVisible();
    Point pointRelativeToComponent(Point p1);
    Component findUnderMouseInWindow(PointerInfo p1);
    public Point getMousePosition() throws HeadlessException;
    boolean isSameOrAncestorOf(Component p1, boolean p2);
    public boolean isShowing();
    public boolean isEnabled();
    boolean isEnabledImpl();
    public void setEnabled(boolean p1);
    public void enable();
    public void enable(boolean p1);
    public void disable();
    public boolean isDoubleBuffered();
    public void enableInputMethods(boolean p1);
    public void setVisible(boolean p1);
    public void show();
    public void show(boolean p1);
    boolean containsFocus();
    void clearMostRecentFocusOwnerOnHide();
    void clearCurrentFocusCycleRootOnHide();
    public void hide();
    public Color getForeground();
    public void setForeground(Color p1);
    public boolean isForegroundSet();
    public Color getBackground();
    public void setBackground(Color p1);
    public boolean isBackgroundSet();
    public Font getFont();
    Font getFont_NoClientCode();
    public void setFont(Font p1);
    public boolean isFontSet();
    public Locale getLocale();
    public void setLocale(Locale p1);
    public ColorModel getColorModel();
    public Point getLocation();
    public Point getLocationOnScreen();
    Point getLocationOnScreen_NoTreeLock();
    public Point location();
    public void setLocation(int p1, int p2);
    public void move(int p1, int p2);
    public void setLocation(Point p1);
    public Dimension getSize();
    public Dimension size();
    public void setSize(int p1, int p2);
    public void resize(int p1, int p2);
    public void setSize(Dimension p1);
    public void resize(Dimension p1);
    public Rectangle getBounds();
    public Rectangle bounds();
    public void setBounds(int p1, int p2, int p3, int p4);
    public void reshape(int p1, int p2, int p3, int p4);
    public void setBounds(Rectangle p1);
    public int getX();
    public int getY();
    public int getWidth();
    public int getHeight();
    public Rectangle getBounds(Rectangle p1);
    public Dimension getSize(Dimension p1);
    public Point getLocation(Point p1);
    public boolean isOpaque();
    public boolean isLightweight();
    public void setPreferredSize(Dimension p1);
    public boolean isPreferredSizeSet();
    public Dimension getPreferredSize();
    public Dimension preferredSize();
    public void setMinimumSize(Dimension p1);
    public boolean isMinimumSizeSet();
    public Dimension getMinimumSize();
    public Dimension minimumSize();
    public void setMaximumSize(Dimension p1);
    public boolean isMaximumSizeSet();
    public Dimension getMaximumSize();
    public float getAlignmentX();
    public float getAlignmentY();
    public void doLayout();
    public void layout();
    public void validate();
    public void invalidate();
    public Graphics getGraphics();
    public FontMetrics getFontMetrics(Font p1);
    public void setCursor(Cursor p1);
    void updateCursorImmediately();
    public Cursor getCursor();
    public boolean isCursorSet();
    public void paint(Graphics p1);
    public void update(Graphics p1);
    public void paintAll(Graphics p1);
    void lightweightPaint(Graphics p1);
    void paintHeavyweightComponents(Graphics p1);
    public void repaint();
    public void repaint(long p1);
    public void repaint(int p1, int p2, int p3, int p4);
    public void repaint(long p1, int p2, int p3, int p4, int p5);
    public void print(Graphics p1);
    public void printAll(Graphics p1);
    void lightweightPrint(Graphics p1);
    void printHeavyweightComponents(Graphics p1);
    public boolean imageUpdate(Image p1, int p2, int p3, int p4, int p5, int p6);
    public Image createImage(ImageProducer p1);
    public Image createImage(int p1, int p2);
    public VolatileImage createVolatileImage(int p1, int p2);
    public VolatileImage createVolatileImage(int p1, int p2, ImageCapabilities p3)       throws AWTException;
    public boolean prepareImage(Image p1, ImageObserver p2);
    public boolean prepareImage(Image p1, int p2, int p3, ImageObserver p4);
    public int checkImage(Image p1, ImageObserver p2);
    public int checkImage(Image p1, int p2, int p3, ImageObserver p4);
    void createBufferStrategy(int p1);
    void createBufferStrategy(int p1, BufferCapabilities p2) throws AWTException;
    BufferStrategy getBufferStrategy();
    Image getBackBuffer();
    public void setIgnoreRepaint(boolean p1);
    public boolean getIgnoreRepaint();
    public boolean contains(int p1, int p2);
    public boolean inside(int p1, int p2);
    public boolean contains(Point p1);
    public Component getComponentAt(int p1, int p2);
    public Component locate(int p1, int p2);
    public Component getComponentAt(Point p2);
    public void deliverEvent(Event p1);
    public void dispatchEvent(AWTEvent p1);
    void dispatchEventImpl(AWTEvent p1);
    void autoProcessMouseWheel(MouseWheelEvent p1);
    boolean dispatchMouseWheelToAncestor(MouseWheelEvent p1);
    boolean checkWindowClosingException();
    boolean areInputMethodsEnabled();
    boolean eventEnabled(AWTEvent p1);
    boolean eventTypeEnabled(int p1);
    public boolean postEvent(Event p1);
    public void addComponentListener(ComponentListener p1);
    public void removeComponentListener(ComponentListener p1);
    public ComponentListener[] getComponentListeners();
    public void addFocusListener(FocusListener p1);
    public void removeFocusListener(FocusListener p1);
    public FocusListener[] getFocusListeners();
    public void addHierarchyListener(HierarchyListener p1);
    public void removeHierarchyListener(HierarchyListener p1);
    public HierarchyListener[] getHierarchyListeners();
    public void addHierarchyBoundsListener(HierarchyBoundsListener p1);
    public void removeHierarchyBoundsListener(HierarchyBoundsListener p1);
    int numListening(long p1);
    int countHierarchyMembers();
    int createHierarchyEvents(int p1, Component p2, Container p3, long p4, boolean p5);
    public HierarchyBoundsListener[] getHierarchyBoundsListeners();
    void adjustListeningChildrenOnParent(long p1, int p2);
    public void addKeyListener(KeyListener p1);
    public void removeKeyListener(KeyListener p1);
    public KeyListener[] getKeyListeners();
    public void addMouseListener(MouseListener p1);
    public void removeMouseListener(MouseListener p1);
    public MouseListener[] getMouseListeners();
    public void addMouseMotionListener(MouseMotionListener p1);
    public void removeMouseMotionListener(MouseMotionListener p1);
    public MouseMotionListener[] getMouseMotionListeners();
    public void addMouseWheelListener(MouseWheelListener p1);
    public void removeMouseWheelListener(MouseWheelListener p1);
    public MouseWheelListener[] getMouseWheelListeners();
    public void addInputMethodListener(InputMethodListener p1);
    public void removeInputMethodListener(InputMethodListener p1);
    public InputMethodListener[] getInputMethodListeners();
    public EventListener[] getListeners(Class p1);
    public InputMethodRequests getInputMethodRequests();
    public InputContext getInputContext();
    boolean postsOldMouseEvents();
    public boolean handleEvent(Event p1);
    public boolean mouseDown(Event p1, int p2, int p3);
    public boolean mouseDrag(Event p1, int p2, int p3);
    public boolean mouseUp(Event p1, int p2, int p3);
    public boolean mouseMove(Event p1, int p2, int p3);
    public boolean mouseEnter(Event p1, int p2, int p3);
    public boolean mouseExit(Event p1, int p2, int p3);
    public boolean keyDown(Event p1, int p2);
    public boolean keyUp(Event p1, int p2);
    public boolean action(Event p1, Object p2);
    public void addNotify();
    public void removeNotify();
    public boolean gotFocus(Event p1, Object p2);
    public boolean lostFocus(Event p1, Object p2);
    public boolean isFocusTraversable();
    public boolean isFocusable();
    public void setFocusable(boolean p1);
    boolean isFocusTraversableOverridden();
    public void setFocusTraversalKeys(int p1, Set p2);
    public Set getFocusTraversalKeys(int p1);
    void setFocusTraversalKeys_NoIDCheck(int p1, Set p2);
    Set getFocusTraversalKeys_NoIDCheck(int p1);
    public boolean areFocusTraversalKeysSet(int p1);
    public void setFocusTraversalKeysEnabled(boolean p1);
    public boolean getFocusTraversalKeysEnabled();
    public void requestFocus();
    public boolean requestFocusInWindow();
    boolean requestFocusHelper(boolean p1, boolean p2);
    void autoTransferFocus(boolean p1);
    public void transferFocus();
    public Container getFocusCycleRootAncestor();
    public boolean isFocusCycleRoot(Container p1);
    public void nextFocus();
    boolean nextFocusHelper();
    public void transferFocusBackward();
    public void transferFocusUpCycle();
    public boolean hasFocus();
    public boolean isFocusOwner();
    public void add(PopupMenu p1);
    public void remove(MenuComponent p1);
    public String toString();
    public void list();
    public void list(PrintStream p1);
    public void list(PrintStream p1, int p2);
    public void list(PrintWriter p1);
    public void list(PrintWriter p1, int p2);
    Container getNativeContainer();
    public void addPropertyChangeListener(PropertyChangeListener p1);
    public void removePropertyChangeListener(PropertyChangeListener p1);
    public PropertyChangeListener[] getPropertyChangeListeners();
    public void addPropertyChangeListener(String p1, PropertyChangeListener p2);
    public void removePropertyChangeListener(String p1, PropertyChangeListener p2);
    public PropertyChangeListener[] getPropertyChangeListeners(String p1);
    public void firePropertyChange(String p1, byte p2, byte p3);
    public void firePropertyChange(String p1, char p2, char p3);
    public void firePropertyChange(String p1, short p2, short p3);
    public void firePropertyChange(String p1, long p2, long p3);
    public void firePropertyChange(String p1, float p2, float p3);
    public void firePropertyChange(String p1, double p2, double p3);
    public void setComponentOrientation(ComponentOrientation p1);
    public ComponentOrientation getComponentOrientation();
    public void applyComponentOrientation(ComponentOrientation p1);
    boolean canBeFocusOwner();
    Window getContainingWindow();
    public AccessibleContext getAccessibleContext();
    int getAccessibleIndexInParent();
    AccessibleStateSet getAccessibleStateSet();
} // end of interface IComponent
