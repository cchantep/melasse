# clock
clock.title=Exemple 1 : Principe de liaison (Binding)

clock.body=<p>Cet exemple de deux horloges, analogique et digitale, permet de comprendre le principe de liaison (<i>Binding</i>).</p> \
<br /> \
<p>Avec les <i>Bindings</i> il devient tr\u00E8s simple de lier un mod\u00E8le avec un composant graphique, et vice-versa, sans avoir besoin d'\u00E9crire du code sp\u00E9cifique assurant la coh\u00E9rence.</p>\
<br /> \
<p>Au moyen du code ci-apr\u00E8s, une liaison est \u00E9tablie entre les mod\u00E8les et vues analogiques et digitales. Ainsi, lorsque le mod\u00E8le analogique est automatiquement modifi\u00E9 par le temps qui passe, le mod\u00E9le et la vue digitales sont mis \u00E0 jour. R\u00E9ciproquement, lorsque l'utilisateur modifie le mod\u00E8le digital au moyen des curseurs de la vue digitale, le mod\u00E8le analogique est mis en correspondance.</p>\
<br />\
<p><b>Gain : Aucun code sp\u00E9cifique de liaison mod\u00E9le/vue (~ 2 classes auditeurs)</b></p>

clock.code=Binder.bind("seconds", this.analogClock,<br /> \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"secondsModel.value",<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.digitalClock,<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new BindingOptionMap());<br /> \
 \
Binder.bind("minutes", this.analogClock,<br /> \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"minutesModel.value",<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.digitalClock,<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new BindingOptionMap());<br /> \
 \
Binder.bind("hours", this.analogClock,<br /> \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"hoursModel.value",<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.digitalClock,<br /> \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new BindingOptionMap());

# convert
convert.title=Example 2 : Liaison avanc\u00E9e (Transformer)

convert.body=<p>Avec melasse, le principe de liaison peut s'appliquer \u00E0 tout mod\u00E8le conforme au standard <i>Bean</i> et toute vue supportant des auditeurs (<i>Observer</i>).</p>\
<br /> \
<p>Dans certains cas, il est utile et efficace de pouvoir transformer les valeurs transitant par les liaisons. Ceci peut \u00EAtre fait en direct en appliquant un <i>transformer</i> \u00E0 la liaison concern\u00E9e.</p>\
<br /> \
<p>Il est ainsi simple de lier un lib\u00E9ll\u00E9 affichant une taille en Ko (kilo octet) avec une propri\u00E9t\u00E9 du mod\u00E8le en octet, la liaison effectuant la transformation sp\u00E9cifi\u00E9e.<br /> \
De m\u00EAme, les fonctions de transformation des liaisons permettent de lier cette valeur en octet \u00E0 un lib\u00E9ll\u00E9 affichant un commentaire en fonction du seuil de 2 Mo.</p>\
<br /> \
<p>Melasse int\u00E8gre des <i>transformers</i> g\u00E9n\u00E9riques (ex : <tt>IntegerToBooleanTransformer</tt>, <tt>StringToNumberTransformer</tt>, ...). Il est bien \u00E9videment possible de cr\u00E9er vos propres <i>transformers</i>, ce qui permet d'allier la simplicit\u00E9 des <i>bindings</i> aux sp\u00E9cificit\u00E9s de chaque projet (N'h\u00E9sitez pas \u00E0 soumettre vos <i>transformers</i>, ou suggestion dans ce domaine). Les <i>transformers</i> permettant \u00E9galement le combiner plusieurs valeurs en une valeur composite/agr\u00E9gat.</p>

convert.code=Binder.bind("value", this.byteModel,<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"text", this.kbyteText,<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;BindingOptionMap().<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(BindingKey.INPUT_TRANSFORMER,<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;ByteToKByteTransformer(locale)));<br />\
<br />\
Binder.bind("value", this.byteModel,<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"text", this.commentText,<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;BindingOptionMap().<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(BindingKey.INPUT_TRANSFORMER,<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;IntegerToCommentTransformer(20*1024,<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lessComment,<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;greaterOrEqualComment)));<br />\
<br />\
Binder.bind("value", this.byteModel,<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"foreground", this.commentText,<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;BindingOptionMap().<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(BindingKey.INPUT_TRANSFORMER,<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;IntegerToCommentTransformer(20*1024,<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color.GREEN,<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color.RED)));<br />

# transfer
transfer.title=Exemple 3 : Simulation transfert de fichier

transfer.body=<p>Melasse fourni \u00E9galement des outils vous permettant une mise en coh\u00E9rence simplifi\u00E9e avec le standard <i>Java Bean</i>.</p>\
<br />\
<p>Ces outils vous permettent notament g\u00E9rer tr\u00E9s simplement les propri\u00E9t\u00E9s d\u00E9riv\u00E9es (ou calcul\u00E9es). Ces propri\u00E9t\u00E9s se retrouvent dans les cas de calcul/traitement globaux prennant en comptes diff\u00E9rentes valeurs simples. Par exemple, lors d'un transfert de fichier, la propri\u00E9t\u00E9 "temps de transfert" est calcul\u00E9e en fonction de la taille du fichier \u00E0 transf\u00E9rer ainsi que du d\u00E9bit disponible.</p>\
<br />\
<p>Avec Melasse, lorsqu'une valeur entrant dans le calcul d'une propri\u00E9t\u00E9 d\u00E9riv\u00E9e est modifi\u00E9e, les notifications de mise \u00E0 jour correspondant \u00E0 la propri\u00E9t\u00E9 calcul\u00E9e sont automatiquement \u00E9mises. Ainsi, la partie de la vue li\u00E9e au "temps de transfert" est bien mise \u00E0 jour lorsque le d\u00E9bit est modifi\u00E9.</p>

transfer.code=this.pcs.registerDependency("dataSize",<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;String[] {&nbsp;<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"estimatedTime"<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br />\
...<br />\
<br />\
public&nbsp;void&nbsp;setDataSize(Integer dataSize)&nbsp;{<br />\
&nbsp;&nbsp;&nbsp;&nbsp;PropertyChangeSupport.PropertyEditSession s =<br />\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.pcs.propertyWillChange("dataSize");<br />\
<br />\
&nbsp;&nbsp;&nbsp;&nbsp;this.dataSize = dataSize;<br />\
<br />\
&nbsp;&nbsp;&nbsp;&nbsp;s.propertyDidChange();<br />\
}

