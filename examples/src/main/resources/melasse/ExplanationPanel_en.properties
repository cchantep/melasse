# clock
clock.title=Example 1 : Binding principle

clock.body=<p>This example with two clocks, analog and digital, will show you binding principle.</p> \
<br> \
<p>With bindings, linking model with UI component is made really easy, without having to write any specific code to ensure coherency.</p>\
<br> \
<p>Thanks to following code, a link is established between analog and digital models and views. Thus, when analog model is automatically modified with time going on, digital model and view are updated. On the other side, as soon as user changes analog model by cursor UI in digital view, analog model is made coherent.</p>\
<br>\
<p><b>Improvement : No specific code to bind model and view (~2 listener classes)</b></p>

clock.code=Binder.bind("seconds", this.analogClock,<br> \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"secondsModel.value",<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.digitalClock,<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new BindingOptionMap());<br> \
 \
Binder.bind("minutes", this.analogClock,<br> \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"minutesModel.value",<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.digitalClock,<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new BindingOptionMap());<br> \
 \
Binder.bind("hours", this.analogClock,<br> \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"hoursModel.value",<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.digitalClock,<br> \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new BindingOptionMap());

# convert
convert.title=Example 2 : Advanced binding (Transformer)

convert.body=<p>With melasse, bindings can be used with any model compliant with Java Beans rules and with any view supporting listeners.</p>\
<br> \
<p>In some cases, it's usefull to be able to transform value going through bindings. It can be done on-fly specifying some transformers on involved bindings.</p>\
<br> \
<p>So size in byte can easily be bound with label displaying size in Kbyte. Binding will perform specified transformation.<br> \
Thus, binding transformations can be used to link this byte value with another label displaying a conditional comment, according the 2Mb limit (comment: is it more or less than given limit?).</p>\
<br> \
<p>Melasse provides generic transformers (e.g. <tt>IntegerToBooleanTransformer</tt>, <tt>StringToNumberTransformer</tt>, ...). You can easily code your own transformers, in order to best adjust bindings with each project features (Do not hesitate to submit us your transformers, or suggestions about that). Transformers also allow to combine/aggregate values in a final one (e.g. usefull for boolean from several condional tests).</p>

convert.code=Binder.bind("value", this.byteModel,<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"text", this.kbyteText,<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;BindingOptionMap().<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(BindingKey.INPUT_TRANSFORMER,<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;ByteToKByteTransformer(locale)));<br>\
<br>\
Binder.bind("value", this.byteModel,<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"text", this.commentText,<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;BindingOptionMap().<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(BindingKey.INPUT_TRANSFORMER,<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;IntegerToCommentTransformer(20*1024,<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lessComment,<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;greaterOrEqualComment)));<br>\
<br>\
Binder.bind("value", this.byteModel,<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"foreground", this.commentText,<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;BindingOptionMap().<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(BindingKey.INPUT_TRANSFORMER,<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;IntegerToCommentTransformer(20*1024,<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color.GREEN,<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color.RED)));<br>

# transfer
transfer.title=Example 3 : File transfer simulation

transfer.body=<p>Melasse also provides tools to ease Java Bean setup.</p>\
<br>\
<p>These tools allow to manage computed properties. These properties are used within global calculation/processing, from individual simple values. For example, during a file transfer, 'estimated tranfer time' is calculated from size and bandwidth properties.</p>\
<br>\
<p>With Melasse, when value is from some computed property, this computed property is automatically updated when individual values are changed. Thus, when view part bound to 'estimated transfer time' is updated when either bandwidth or size is changed.</p>

transfer.code=this.pcs.registerDependency("dataSize",<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;String[] {&nbsp;<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"estimatedTime"<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>\
...<br>\
<br>\
public&nbsp;void&nbsp;setDataSize(Integer dataSize)&nbsp;{<br>\
&nbsp;&nbsp;&nbsp;&nbsp;PropertyChangeSupport.PropertyEditSession s =<br>\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.pcs.propertyWillChange("dataSize");<br>\
<br>\
&nbsp;&nbsp;&nbsp;&nbsp;this.dataSize = dataSize;<br>\
<br>\
&nbsp;&nbsp;&nbsp;&nbsp;s.propertyDidChange();<br>\
}